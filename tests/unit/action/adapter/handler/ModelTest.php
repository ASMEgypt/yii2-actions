<?php
/**
 * Created by PhpStorm.
 * User: execut
 * Date: 12/22/16
 * Time: 9:42 AM
 */

namespace execut\actions\action\adapter\gridView\handler;
use execut\actions\action\adapter\Response;
use execut\TestCase;
use execut\yii\db\ActiveRecord;
use yii\data\ActiveDataProvider;

class ModelTest extends TestCase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $_SERVER['HTTP_REFERER'] = 'test';
    }

    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $_SERVER['HTTP_REFERER'] = null;
    }

    public function testRun() {
        $query = $this->getMockBuilder(ActiveRecord::className())->setMethods(['select', 'queryAttribute'])->getMock();
        $query->method('select')->with('id')->willReturn($query);
        $query->method('queryAttribute')->willReturn([1, 2]);
        $dataProvider = new ActiveDataProvider([
            'query' => $query,
        ]);

        $handler = new Model([
            'attributes' => ['attribute' => 'value'],
            'modelClass' => TestModel::className(),
            'dataProvider' => $dataProvider,
            'successMessage' => '# records succesfull updated',
            'method' => 'updateAll',
        ]);
        $response = $handler->run();
        $this->assertEquals(['attribute' => 'value'], TestModel::$updatedAttributes);
        $this->assertEquals(['id' => [1,2]], TestModel::$conditions);

        $this->assertInstanceOf(\execut\actions\action\Response::className(), $response);

        $this->assertInstanceOf(\yii\base\Response::className(), $response->content);
        $this->assertEquals('test', $response->content->getHeaders()->get('Location'));

        $this->assertEquals([
            'kv-detail-success' => '2 records succesfull updated',
        ], $response->flashes);
    }
}

class TestModel extends ActiveRecord {
    public static $updatedAttributes = [];
    public static $conditions = [];
    public static function updateAll($attributes, $condition = '', $params = [])
    {
        self::$updatedAttributes = $attributes;
        self::$conditions = $condition;
        return 2; // TODO: Change the autogenerated stub
    }
}